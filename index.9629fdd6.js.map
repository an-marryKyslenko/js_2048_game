{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        // eslint-disable-next-line no-console\n        this.initialState = initialState;\n        this.copeInitialState = initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.status === \"playing\") {\n            const copyInitialState = this.initialState.map((row)=>[\n                    ...row\n                ]);\n            for(let rowIndex = 0; rowIndex < 4; rowIndex++){\n                const newRow = [];\n                for(let i = 0; i < 4; i++)if (this.initialState[rowIndex][i] !== 0) newRow.push(this.initialState[rowIndex][i]);\n                this.merchCails(newRow);\n                for(let index = 0; index < 4; index++)this.initialState[rowIndex][index] = newRow[index] || 0;\n            }\n            if (this.canMove(copyInitialState, this.initialState)) this.randomCail();\n        }\n    }\n    moveRight() {\n        if (this.status === \"playing\") {\n            const copyInitialState = this.initialState.map((row)=>[\n                    ...row\n                ]);\n            for(let rowIndex = 0; rowIndex < 4; rowIndex++){\n                const newRow = [];\n                for(let i = 3; i >= 0; i--)if (this.initialState[rowIndex][i] !== 0) newRow.push(this.initialState[rowIndex][i]);\n                this.merchCails(newRow);\n                let newRowIndex = 0;\n                for(let index = 3; index >= 0; index--){\n                    this.initialState[rowIndex][index] = newRow[newRowIndex] || 0;\n                    newRowIndex++;\n                }\n            }\n            if (this.canMove(copyInitialState, this.initialState)) this.randomCail();\n        }\n    }\n    moveUp() {\n        if (this.status === \"playing\") {\n            const copyInitialState = this.initialState.map((row)=>[\n                    ...row\n                ]);\n            for(let columnIndex = 0; columnIndex < 4; columnIndex++){\n                const newColumn = [];\n                for(let rowIndex = 0; rowIndex < 4; rowIndex++)if (this.initialState[rowIndex][columnIndex] !== 0) newColumn.push(this.initialState[rowIndex][columnIndex]);\n                this.merchCails(newColumn);\n                for(let rowIndex = 0; rowIndex < 4; rowIndex++)this.initialState[rowIndex][columnIndex] = newColumn[rowIndex] || 0;\n            }\n            if (this.canMove(copyInitialState, this.initialState)) this.randomCail();\n        }\n    }\n    moveDown() {\n        if (this.status === \"playing\") {\n            const copyInitialState = this.initialState.map((row)=>[\n                    ...row\n                ]);\n            for(let columnIndex = 0; columnIndex < 4; columnIndex++){\n                const newColumn = [];\n                for(let rowIndex = 3; rowIndex >= 0; rowIndex--)if (this.initialState[rowIndex][columnIndex] !== 0) newColumn.push(this.initialState[rowIndex][columnIndex]);\n                this.merchCails(newColumn);\n                let index = 0;\n                for(let rowIndex = 3; rowIndex >= 0; rowIndex--){\n                    this.initialState[rowIndex][columnIndex] = newColumn[index] || 0;\n                    index++;\n                }\n            }\n            if (this.canMove(copyInitialState, this.initialState)) this.randomCail();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.initialState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.checkGameOver(this.initialState)) this.status = \"lose\";\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        let count = 0;\n        while(count < 2){\n            this.randomCail();\n            count++;\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"idle\";\n        this.score = 0;\n        this.initialState = this.copeInitialState;\n    }\n    // Add your own methods here\n    randomCail() {\n        const hasEmptyCells = this.initialState.some((row)=>row.includes(0));\n        const increaseValue = Math.random() < 0.1 ? 4 : 2;\n        const maxNumber = this.initialState.length;\n        if (hasEmptyCells) while(true){\n            const randomIndexRow = Math.floor(Math.random() * maxNumber);\n            const randomIndexCail = Math.floor(Math.random() * maxNumber);\n            if (this.initialState[randomIndexRow][randomIndexCail] === 0) {\n                this.initialState[randomIndexRow][randomIndexCail] = increaseValue;\n                break;\n            }\n        }\n        else this.status = \"lose\";\n    }\n    canMove(oldState, newState) {\n        for(let i = 0; i < this.initialState.length; i++)for(let j = 0; j < this.initialState.length; j++){\n            if (oldState[i][j] !== newState[i][j]) return true;\n        }\n        return false;\n    }\n    checkGameOver(state) {\n        for(let i = 0; i < this.initialState.length; i++)for(let j = 0; j < this.initialState.length; j++){\n            if (state[i][j] === 0) return false;\n        }\n        for(let i = 0; i < this.initialState.length; i++)for(let j = 0; j < this.initialState.length; j++){\n            if (j < this.initialState.length - 1 && state[i][j] === state[i][j + 1]) return false;\n            if (i < this.initialState.length - 1 && state[i][j] === state[i + 1][j]) return false;\n        }\n        return true;\n    }\n    merchCails(row) {\n        for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1] && row[i]) {\n            row[i] *= 2;\n            this.score += row[i];\n            if (row[i] === 2048) this.status = \"win\";\n            row.splice(i + 1, 1);\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const scoreResult = document.querySelector(\".game-score\");\n    const startButton = document.querySelector(\".start\");\n    const gameRows = document.querySelectorAll(\".field-row\");\n    function removeModificators(item) {\n        const classes = item.className.split(\" \");\n        classes.forEach((className)=>{\n            if (/^field-cell--\\d+$/.test(className)) item.classList.remove(className);\n        });\n    }\n    function checkResult(result) {\n        if (result === \"win\" || result === \"lose\") {\n            const message = document.querySelector(`.message-${result}`);\n            message.classList.remove(\"hidden\");\n        }\n    }\n    function replaceItems() {\n        const state = $09e991522ca7e64e$var$game.getState();\n        for(let indexRow = 0; indexRow < state.length; indexRow++){\n            const row = gameRows[indexRow].querySelectorAll(\".field-cell\");\n            for(let indexCail = 0; indexCail < row.length; indexCail++){\n                const cailNumber = state[indexRow][indexCail];\n                removeModificators(row[indexCail]);\n                if (cailNumber !== 0) {\n                    row[indexCail].classList.add(`field-cell--${cailNumber}`);\n                    row[indexCail].innerText = cailNumber;\n                } else row[indexCail].innerText = \"\";\n            }\n        }\n    }\n    startButton.addEventListener(\"click\", ()=>{\n        const messageStart = document.querySelector(\".message-start\");\n        if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") $09e991522ca7e64e$var$game.start();\n        else {\n            $09e991522ca7e64e$var$game.restart();\n            location.reload();\n        }\n        messageStart.classList.add(\"hidden\");\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n        startButton.innerText = \"Restart\";\n        replaceItems();\n    });\n    document.addEventListener(\"keydown\", (e)=>{\n        e.preventDefault();\n        switch(e.key){\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n        }\n        replaceItems();\n        scoreResult.innerText = $09e991522ca7e64e$var$game.getScore();\n        checkResult($09e991522ca7e64e$var$game.getStatus());\n    });\n});\n\n\n//# sourceMappingURL=index.9629fdd6.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\ndocument.addEventListener('DOMContentLoaded', () => {\n  const scoreResult = document.querySelector('.game-score');\n  const startButton = document.querySelector('.start');\n  const gameRows = document.querySelectorAll('.field-row');\n\n  function removeModificators(item) {\n    const classes = item.className.split(' ');\n\n    classes.forEach((className) => {\n      if (/^field-cell--\\d+$/.test(className)) {\n        item.classList.remove(className);\n      }\n    });\n  }\n\n  function checkResult(result) {\n    if (result === 'win' || result === 'lose') {\n      const message = document.querySelector(`.message-${result}`);\n\n      message.classList.remove('hidden');\n    }\n  }\n\n  function replaceItems() {\n    const state = game.getState();\n\n    for (let indexRow = 0; indexRow < state.length; indexRow++) {\n      const row = gameRows[indexRow].querySelectorAll('.field-cell');\n\n      for (let indexCail = 0; indexCail < row.length; indexCail++) {\n        const cailNumber = state[indexRow][indexCail];\n\n        removeModificators(row[indexCail]);\n\n        if (cailNumber !== 0) {\n          row[indexCail].classList.add(`field-cell--${cailNumber}`);\n          row[indexCail].innerText = cailNumber;\n        } else {\n          row[indexCail].innerText = '';\n        }\n      }\n    }\n  }\n\n  startButton.addEventListener('click', () => {\n    const messageStart = document.querySelector('.message-start');\n\n    if (game.getStatus() === 'idle') {\n      game.start();\n    } else {\n      game.restart();\n      location.reload();\n    }\n    messageStart.classList.add('hidden');\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.innerText = 'Restart';\n    replaceItems();\n  });\n\n  document.addEventListener('keydown', (e) => {\n    e.preventDefault();\n\n    switch (e.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n    }\n    replaceItems();\n    scoreResult.innerText = game.getScore();\n\n    checkResult(game.getStatus());\n  });\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    this.initialState = initialState;\n    this.copeInitialState = initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.initialState.map((row) => [...row]);\n\n      for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n        const newRow = [];\n\n        for (let i = 0; i < 4; i++) {\n          if (this.initialState[rowIndex][i] !== 0) {\n            newRow.push(this.initialState[rowIndex][i]);\n          }\n        }\n\n        this.merchCails(newRow);\n\n        for (let index = 0; index < 4; index++) {\n          this.initialState[rowIndex][index] = newRow[index] || 0;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCail();\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.initialState.map((row) => [...row]);\n\n      for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n        const newRow = [];\n\n        for (let i = 3; i >= 0; i--) {\n          if (this.initialState[rowIndex][i] !== 0) {\n            newRow.push(this.initialState[rowIndex][i]);\n          }\n        }\n\n        this.merchCails(newRow);\n\n        let newRowIndex = 0;\n\n        for (let index = 3; index >= 0; index--) {\n          this.initialState[rowIndex][index] = newRow[newRowIndex] || 0;\n          newRowIndex++;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCail();\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.initialState.map((row) => [...row]);\n\n      for (let columnIndex = 0; columnIndex < 4; columnIndex++) {\n        const newColumn = [];\n\n        for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n          if (this.initialState[rowIndex][columnIndex] !== 0) {\n            newColumn.push(this.initialState[rowIndex][columnIndex]);\n          }\n        }\n\n        this.merchCails(newColumn);\n\n        for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n          this.initialState[rowIndex][columnIndex] = newColumn[rowIndex] || 0;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCail();\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.initialState.map((row) => [...row]);\n\n      for (let columnIndex = 0; columnIndex < 4; columnIndex++) {\n        const newColumn = [];\n\n        for (let rowIndex = 3; rowIndex >= 0; rowIndex--) {\n          if (this.initialState[rowIndex][columnIndex] !== 0) {\n            newColumn.push(this.initialState[rowIndex][columnIndex]);\n          }\n        }\n\n        this.merchCails(newColumn);\n\n        let index = 0;\n\n        for (let rowIndex = 3; rowIndex >= 0; rowIndex--) {\n          this.initialState[rowIndex][columnIndex] = newColumn[index] || 0;\n          index++;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCail();\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.checkGameOver(this.initialState)) {\n      this.status = 'lose';\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n\n    let count = 0;\n\n    while (count < 2) {\n      this.randomCail();\n      count++;\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n    this.initialState = this.copeInitialState;\n  }\n\n  // Add your own methods here\n  randomCail() {\n    const hasEmptyCells = this.initialState.some((row) => row.includes(0));\n    const increaseValue = Math.random() < 0.1 ? 4 : 2;\n    const maxNumber = this.initialState.length;\n\n    if (hasEmptyCells) {\n      while (true) {\n        const randomIndexRow = Math.floor(Math.random() * maxNumber);\n        const randomIndexCail = Math.floor(Math.random() * maxNumber);\n\n        if (this.initialState[randomIndexRow][randomIndexCail] === 0) {\n          this.initialState[randomIndexRow][randomIndexCail] = increaseValue;\n          break;\n        }\n      }\n    } else {\n      this.status = 'lose';\n    }\n  }\n\n  canMove(oldState, newState) {\n    for (let i = 0; i < this.initialState.length; i++) {\n      for (let j = 0; j < this.initialState.length; j++) {\n        if (oldState[i][j] !== newState[i][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameOver(state) {\n    for (let i = 0; i < this.initialState.length; i++) {\n      for (let j = 0; j < this.initialState.length; j++) {\n        if (state[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.initialState.length; i++) {\n      for (let j = 0; j < this.initialState.length; j++) {\n        if (\n          j < this.initialState.length - 1 &&\n          state[i][j] === state[i][j + 1]\n        ) {\n          return false;\n        }\n\n        if (\n          i < this.initialState.length - 1 &&\n          state[i][j] === state[i + 1][j]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  merchCails(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1] && row[i]) {\n        row[i] *= 2;\n        this.score += row[i];\n\n        if (row[i] === 2048) {\n          this.status = 'win';\n        }\n        row.splice(i + 1, 1);\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","copeInitialState","map","row","status","score","moveLeft","copyInitialState","rowIndex","newRow","i","push","merchCails","index","canMove","randomCail","moveRight","newRowIndex","moveUp","columnIndex","newColumn","moveDown","getScore","getState","getStatus","checkGameOver","start","count","restart","hasEmptyCells","some","includes","increaseValue","Math","random","maxNumber","length","randomIndexRow","floor","randomIndexCail","oldState","newState","j","state","splice","document","addEventListener","scoreResult","querySelector","startButton","gameRows","querySelectorAll","replaceItems","indexRow","indexCail","cailNumber","removeModificators","item","classes","className","split","forEach","test","classList","remove","add","innerText","messageStart","location","reload","e","result","preventDefault","key","message"],"version":3,"file":"index.9629fdd6.js.map"}
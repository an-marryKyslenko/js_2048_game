{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        // eslint-disable-next-line no-console\n        this.initialState = initialState;\n        this.copeInitialState = initialState.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n        });\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status === \"playing\") {\n                    var copyInitialState = this.initialState.map(function(row) {\n                        return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                    });\n                    for(var rowIndex = 0; rowIndex < 4; rowIndex++){\n                        var newRow = [];\n                        for(var i = 0; i < 4; i++)if (this.initialState[rowIndex][i] !== 0) newRow.push(this.initialState[rowIndex][i]);\n                        this.merchCails(newRow);\n                        for(var index = 0; index < 4; index++)this.initialState[rowIndex][index] = newRow[index] || 0;\n                    }\n                    if (this.canMove(copyInitialState, this.initialState)) this.randomCail();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status === \"playing\") {\n                    var copyInitialState = this.initialState.map(function(row) {\n                        return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                    });\n                    for(var rowIndex = 0; rowIndex < 4; rowIndex++){\n                        var newRow = [];\n                        for(var i = 3; i >= 0; i--)if (this.initialState[rowIndex][i] !== 0) newRow.push(this.initialState[rowIndex][i]);\n                        this.merchCails(newRow);\n                        var newRowIndex = 0;\n                        for(var index = 3; index >= 0; index--){\n                            this.initialState[rowIndex][index] = newRow[newRowIndex] || 0;\n                            newRowIndex++;\n                        }\n                    }\n                    if (this.canMove(copyInitialState, this.initialState)) this.randomCail();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status === \"playing\") {\n                    var copyInitialState = this.initialState.map(function(row) {\n                        return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                    });\n                    for(var columnIndex = 0; columnIndex < 4; columnIndex++){\n                        var newColumn = [];\n                        for(var rowIndex = 0; rowIndex < 4; rowIndex++)if (this.initialState[rowIndex][columnIndex] !== 0) newColumn.push(this.initialState[rowIndex][columnIndex]);\n                        this.merchCails(newColumn);\n                        for(var rowIndex1 = 0; rowIndex1 < 4; rowIndex1++)this.initialState[rowIndex1][columnIndex] = newColumn[rowIndex1] || 0;\n                    }\n                    if (this.canMove(copyInitialState, this.initialState)) this.randomCail();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status === \"playing\") {\n                    var copyInitialState = this.initialState.map(function(row) {\n                        return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                    });\n                    for(var columnIndex = 0; columnIndex < 4; columnIndex++){\n                        var newColumn = [];\n                        for(var rowIndex = 3; rowIndex >= 0; rowIndex--)if (this.initialState[rowIndex][columnIndex] !== 0) newColumn.push(this.initialState[rowIndex][columnIndex]);\n                        this.merchCails(newColumn);\n                        var index = 0;\n                        for(var rowIndex1 = 3; rowIndex1 >= 0; rowIndex1--){\n                            this.initialState[rowIndex1][columnIndex] = newColumn[index] || 0;\n                            index++;\n                        }\n                    }\n                    if (this.canMove(copyInitialState, this.initialState)) this.randomCail();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.initialState;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                if (this.checkGameOver(this.initialState)) this.status = \"lose\";\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                var count = 0;\n                while(count < 2){\n                    this.randomCail();\n                    count++;\n                }\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.score = 0;\n                this.initialState = this.copeInitialState;\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"randomCail\",\n            value: function randomCail() {\n                var hasEmptyCells = this.initialState.some(function(row) {\n                    return row.includes(0);\n                });\n                var increaseValue = Math.random() < 0.1 ? 4 : 2;\n                var maxNumber = this.initialState.length;\n                if (hasEmptyCells) while(true){\n                    var randomIndexRow = Math.floor(Math.random() * maxNumber);\n                    var randomIndexCail = Math.floor(Math.random() * maxNumber);\n                    if (this.initialState[randomIndexRow][randomIndexCail] === 0) {\n                        this.initialState[randomIndexRow][randomIndexCail] = increaseValue;\n                        break;\n                    }\n                }\n                else this.status = \"lose\";\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove(oldState, newState) {\n                for(var i = 0; i < this.initialState.length; i++)for(var j = 0; j < this.initialState.length; j++){\n                    if (oldState[i][j] !== newState[i][j]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"checkGameOver\",\n            value: function checkGameOver(state) {\n                for(var i = 0; i < this.initialState.length; i++)for(var j = 0; j < this.initialState.length; j++){\n                    if (state[i][j] === 0) return false;\n                }\n                for(var i1 = 0; i1 < this.initialState.length; i1++)for(var j1 = 0; j1 < this.initialState.length; j1++){\n                    if (j1 < this.initialState.length - 1 && state[i1][j1] === state[i1][j1 + 1]) return false;\n                    if (i1 < this.initialState.length - 1 && state[i1][j1] === state[i1 + 1][j1]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"merchCails\",\n            value: function merchCails(row) {\n                for(var i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1] && row[i]) {\n                    row[i] *= 2;\n                    this.score += row[i];\n                    if (row[i] === 2048) this.status = \"win\";\n                    row.splice(i + 1, 1);\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var removeModificators = function removeModificators(item) {\n        var classes = item.className.split(\" \");\n        classes.forEach(function(className) {\n            if (/^field-cell--\\d+$/.test(className)) item.classList.remove(className);\n        });\n    };\n    var checkResult = function checkResult(result) {\n        if (result === \"win\" || result === \"lose\") {\n            var message = document.querySelector(\".message-\".concat(result));\n            message.classList.remove(\"hidden\");\n        }\n    };\n    var replaceItems = function replaceItems() {\n        var state = $197cd56b15c33885$var$game.getState();\n        for(var indexRow = 0; indexRow < state.length; indexRow++){\n            var row = gameRows[indexRow].querySelectorAll(\".field-cell\");\n            for(var indexCail = 0; indexCail < row.length; indexCail++){\n                var cailNumber = state[indexRow][indexCail];\n                removeModificators(row[indexCail]);\n                if (cailNumber !== 0) {\n                    row[indexCail].classList.add(\"field-cell--\".concat(cailNumber));\n                    row[indexCail].innerText = cailNumber;\n                } else row[indexCail].innerText = \"\";\n            }\n        }\n    };\n    var scoreResult = document.querySelector(\".game-score\");\n    var startButton = document.querySelector(\".start\");\n    var gameRows = document.querySelectorAll(\".field-row\");\n    startButton.addEventListener(\"click\", function() {\n        var messageStart = document.querySelector(\".message-start\");\n        if ($197cd56b15c33885$var$game.getStatus() === \"idle\") $197cd56b15c33885$var$game.start();\n        else {\n            $197cd56b15c33885$var$game.restart();\n            location.reload();\n        }\n        messageStart.classList.add(\"hidden\");\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n        startButton.innerText = \"Restart\";\n        replaceItems();\n    });\n    document.addEventListener(\"keydown\", function(e) {\n        e.preventDefault();\n        switch(e.key){\n            case \"ArrowUp\":\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n            case \"ArrowLeft\":\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n        }\n        replaceItems();\n        scoreResult.innerText = $197cd56b15c33885$var$game.getScore();\n        checkResult($197cd56b15c33885$var$game.getStatus());\n    });\n});\n\n})();\n//# sourceMappingURL=index.a8e0dd03.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\ndocument.addEventListener('DOMContentLoaded', () => {\n  const scoreResult = document.querySelector('.game-score');\n  const startButton = document.querySelector('.start');\n  const gameRows = document.querySelectorAll('.field-row');\n\n  function removeModificators(item) {\n    const classes = item.className.split(' ');\n\n    classes.forEach((className) => {\n      if (/^field-cell--\\d+$/.test(className)) {\n        item.classList.remove(className);\n      }\n    });\n  }\n\n  function checkResult(result) {\n    if (result === 'win' || result === 'lose') {\n      const message = document.querySelector(`.message-${result}`);\n\n      message.classList.remove('hidden');\n    }\n  }\n\n  function replaceItems() {\n    const state = game.getState();\n\n    for (let indexRow = 0; indexRow < state.length; indexRow++) {\n      const row = gameRows[indexRow].querySelectorAll('.field-cell');\n\n      for (let indexCail = 0; indexCail < row.length; indexCail++) {\n        const cailNumber = state[indexRow][indexCail];\n\n        removeModificators(row[indexCail]);\n\n        if (cailNumber !== 0) {\n          row[indexCail].classList.add(`field-cell--${cailNumber}`);\n          row[indexCail].innerText = cailNumber;\n        } else {\n          row[indexCail].innerText = '';\n        }\n      }\n    }\n  }\n\n  startButton.addEventListener('click', () => {\n    const messageStart = document.querySelector('.message-start');\n\n    if (game.getStatus() === 'idle') {\n      game.start();\n    } else {\n      game.restart();\n      location.reload();\n    }\n    messageStart.classList.add('hidden');\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.innerText = 'Restart';\n    replaceItems();\n  });\n\n  document.addEventListener('keydown', (e) => {\n    e.preventDefault();\n\n    switch (e.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n    }\n    replaceItems();\n    scoreResult.innerText = game.getScore();\n\n    checkResult(game.getStatus());\n  });\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    this.initialState = initialState;\n    this.copeInitialState = initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.initialState.map((row) => [...row]);\n\n      for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n        const newRow = [];\n\n        for (let i = 0; i < 4; i++) {\n          if (this.initialState[rowIndex][i] !== 0) {\n            newRow.push(this.initialState[rowIndex][i]);\n          }\n        }\n\n        this.merchCails(newRow);\n\n        for (let index = 0; index < 4; index++) {\n          this.initialState[rowIndex][index] = newRow[index] || 0;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCail();\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.initialState.map((row) => [...row]);\n\n      for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n        const newRow = [];\n\n        for (let i = 3; i >= 0; i--) {\n          if (this.initialState[rowIndex][i] !== 0) {\n            newRow.push(this.initialState[rowIndex][i]);\n          }\n        }\n\n        this.merchCails(newRow);\n\n        let newRowIndex = 0;\n\n        for (let index = 3; index >= 0; index--) {\n          this.initialState[rowIndex][index] = newRow[newRowIndex] || 0;\n          newRowIndex++;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCail();\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.initialState.map((row) => [...row]);\n\n      for (let columnIndex = 0; columnIndex < 4; columnIndex++) {\n        const newColumn = [];\n\n        for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n          if (this.initialState[rowIndex][columnIndex] !== 0) {\n            newColumn.push(this.initialState[rowIndex][columnIndex]);\n          }\n        }\n\n        this.merchCails(newColumn);\n\n        for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n          this.initialState[rowIndex][columnIndex] = newColumn[rowIndex] || 0;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCail();\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.initialState.map((row) => [...row]);\n\n      for (let columnIndex = 0; columnIndex < 4; columnIndex++) {\n        const newColumn = [];\n\n        for (let rowIndex = 3; rowIndex >= 0; rowIndex--) {\n          if (this.initialState[rowIndex][columnIndex] !== 0) {\n            newColumn.push(this.initialState[rowIndex][columnIndex]);\n          }\n        }\n\n        this.merchCails(newColumn);\n\n        let index = 0;\n\n        for (let rowIndex = 3; rowIndex >= 0; rowIndex--) {\n          this.initialState[rowIndex][columnIndex] = newColumn[index] || 0;\n          index++;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCail();\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.checkGameOver(this.initialState)) {\n      this.status = 'lose';\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n\n    let count = 0;\n\n    while (count < 2) {\n      this.randomCail();\n      count++;\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n    this.initialState = this.copeInitialState;\n  }\n\n  // Add your own methods here\n  randomCail() {\n    const hasEmptyCells = this.initialState.some((row) => row.includes(0));\n    const increaseValue = Math.random() < 0.1 ? 4 : 2;\n    const maxNumber = this.initialState.length;\n\n    if (hasEmptyCells) {\n      while (true) {\n        const randomIndexRow = Math.floor(Math.random() * maxNumber);\n        const randomIndexCail = Math.floor(Math.random() * maxNumber);\n\n        if (this.initialState[randomIndexRow][randomIndexCail] === 0) {\n          this.initialState[randomIndexRow][randomIndexCail] = increaseValue;\n          break;\n        }\n      }\n    } else {\n      this.status = 'lose';\n    }\n  }\n\n  canMove(oldState, newState) {\n    for (let i = 0; i < this.initialState.length; i++) {\n      for (let j = 0; j < this.initialState.length; j++) {\n        if (oldState[i][j] !== newState[i][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameOver(state) {\n    for (let i = 0; i < this.initialState.length; i++) {\n      for (let j = 0; j < this.initialState.length; j++) {\n        if (state[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.initialState.length; i++) {\n      for (let j = 0; j < this.initialState.length; j++) {\n        if (\n          j < this.initialState.length - 1 &&\n          state[i][j] === state[i][j + 1]\n        ) {\n          return false;\n        }\n\n        if (\n          i < this.initialState.length - 1 &&\n          state[i][j] === state[i + 1][j]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  merchCails(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1] && row[i]) {\n        row[i] *= 2;\n        this.score += row[i];\n\n        if (row[i] === 2048) {\n          this.status = 'win';\n        }\n        row.splice(i + 1, 1);\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","copeInitialState","map","row","status","score","key","value","copyInitialState","rowIndex","newRow","push","merchCails","index","canMove","randomCail","newRowIndex","columnIndex","newColumn","rowIndex1","checkGameOver","count","hasEmptyCells","some","includes","increaseValue","Math","random","maxNumber","randomIndexRow","floor","randomIndexCail","oldState","newState","j","state","i1","j1","splice","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","document","addEventListener","removeModificators","item","classes","className","split","forEach","classList","remove","checkResult","result","message","querySelector","concat","replaceItems","getState","indexRow","gameRows","querySelectorAll","indexCail","cailNumber","add","innerText","scoreResult","startButton","messageStart","getStatus","start","restart","location","reload","e","preventDefault","moveUp","moveDown","moveLeft","moveRight","getScore"],"version":3,"file":"index.a8e0dd03.js.map"}